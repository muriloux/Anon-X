/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./src/repository.ts
function saveToLocalStorage(key, value) {
    const currentCoordsData = getFromLocalStorage(key);
    const newCoords = currentCoordsData;
    newCoords.push(value);
    localStorage.setItem(key, JSON.stringify(newCoords));
}
function getFromLocalStorage(key) {
    const data = localStorage.getItem(key);
    return data ? JSON.parse(data) : [];
}

;// CONCATENATED MODULE: ./src/functions.ts

let isListVisible = false;
const coordInput = document.getElementById("addCoordInput");
const coordsList = document.getElementById("coordsList");
const chevronIcon = document.getElementById("chevronIcon");
function getCurrentTabUrl(callback) {
    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
        if (tabs && tabs[0] && tabs[0].url) {
            const urlObject = new URL(tabs[0].url);
            callback(urlObject);
        }
    });
}
function onAddCoordButtonClick() {
    const coordName = coordInput.value;
    getCurrentTabUrl((url) => {
        const hash = url.hash;
        const coord = hash.replace(/#\w+,/i, "");
        saveToLocalStorage("coords", { [coordName || coord]: coord });
        updateCoordsList();
    });
    coordInput.value = "";
}
function updateCoordsList() {
    const currentCoordsData = getFromLocalStorage("coords");
    getCurrentTabUrl((url) => {
        const hash = url.hash;
        const href = url.href;
        const cleanHash = hash.replace(/,(\d+,\d+)/, "");
        coordsList.innerHTML = "";
        currentCoordsData.forEach((coord) => {
            const coordKey = Object.keys(coord)[0];
            const newHash = `${cleanHash},${coord[coordKey]}`;
            const newURL = href.replace(hash, newHash);
            const listItem = document.createElement("li");
            const anchor = document.createElement("a");
            anchor.innerText = coordKey;
            anchor.href = newURL;
            anchor.addEventListener("click", (event) => {
                event.preventDefault();
                chrome.tabs.update({ url: newURL });
            });
            listItem.appendChild(anchor);
            coordsList === null || coordsList === void 0 ? void 0 : coordsList.appendChild(listItem);
        });
    });
}
function toggleCoordsList(unfold) {
    if (unfold && isListVisible) {
        return;
    }
    if (!isListVisible) {
        coordsList.style.display = "block";
        updateCoordsList();
        chevronIcon.textContent = "▲";
    }
    else {
        coordsList.style.display = "none";
        chevronIcon.textContent = "▼";
    }
    isListVisible = !isListVisible;
}

;// CONCATENATED MODULE: ./src/popup.ts


const addCoordButton = document.getElementById("addCoordButton");
const addCoordInput = document.getElementById("addCoordInput");
const toggleCoordsButton = document.getElementById("toggleCoordsButton");
//updateCoordsList();
addCoordButton === null || addCoordButton === void 0 ? void 0 : addCoordButton.addEventListener("click", () => {
    onAddCoordButtonClick();
    toggleCoordsList(true);
});
addCoordInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
        e.preventDefault();
        onAddCoordButtonClick();
        toggleCoordsList(true);
    }
});
toggleCoordsButton.addEventListener("click", () => toggleCoordsList());

/******/ })()
;